package org.sysethereum.agents.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple12;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeBattleManager extends Contract {
    private static final String BINARY = "0x60806040526001600055600060025534801561001a57600080fd5b50604051608080612fda83398101604090815281516020830151918301516060909301516007805492949285919060ff1916600183600281111561005a57fe5b021790555060098054600160a060020a031916600160a060020a03949094169390931790925560035560045550612f44806100966000396000f30060806040526004361061013c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416626622a4811461014157806301c17ec714610161578063089845e1146101c45780630f2c63ff1461022257806318b011de1461023d5780631fc8ad6f14610264578063312f6307146102cc5780633c2f7fb8146102e157806341b3d185146103125780635292a590146103275780636beb72621461033f5780636c8bb7391461035457806371a8c18a1461038857806375988c30146103b4578063795ea18e146103d25780637dbd2832146103ea57806399b32f3a1461048e5780639e30ce2d146104a6578063a6c07c96146104d7578063d1daeede146104ef578063db1ee90314610519578063db484ac114610531578063e1bafb9114610552578063f1afcfa614610573575b600080fd5b34801561014d57600080fd5b5061015f600435602435604435610588565b005b34801561016d57600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261015f94803594602480359560443595369560849493019181908401838280828437509497506106779650505050505050565b3480156101d057600080fd5b50604080516020600460443581810135838102808601850190965280855261015f9583359560248035963696956064959394920192918291850190849080828437509497506108589650505050505050565b34801561022e57600080fd5b5061015f600435602435610997565b34801561024957600080fd5b50610252610a7d565b60408051918252519081900360200190f35b34801561027057600080fd5b5061027c600435610a83565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156102b85781810151838201526020016102a0565b505050509050019250505060405180910390f35b3480156102d857600080fd5b50610252610ae9565b3480156102ed57600080fd5b506102f6610aef565b60408051600160a060020a039092168252519081900360200190f35b34801561031e57600080fd5b50610252610b03565b34801561033357600080fd5b5061015f600435610b09565b34801561034b57600080fd5b50610252610b35565b34801561036057600080fd5b5061015f60048035906024803591604435918201910135600160a060020a0360643516610b3b565b34801561039457600080fd5b506103a0600435610d31565b604080519115158252519081900360200190f35b3480156103c057600080fd5b5061015f600435602435604435610d85565b3480156103de57600080fd5b50610252600435610e21565b3480156103f657600080fd5b50610402600435610f5f565b604080518d8152602081018d9052600160a060020a03808d1692820192909252908a1660608201526080810189905260a0810188905260c0810187905260e08101869052610100810185905261012081018490526101408101839052610160810182600b81111561046f57fe5b60ff1681526020019c5050505050505050505050505060405180910390f35b34801561049a57600080fd5b506103a0600435610fce565b3480156104b257600080fd5b506104be60043561101c565b6040805192835260208301919091528051918290030190f35b3480156104e357600080fd5b5061015f600435611035565b3480156104fb57600080fd5b50610252600435600160a060020a03602435811690604435166110ae565b34801561052557600080fd5b5061015f600435611290565b34801561053d57600080fd5b5061015f600160a060020a03600435166112b8565b34801561055e57600080fd5b5061015f600160a060020a0360043516611313565b34801561057f57600080fd5b50610252611379565b60008281526001602052604081206003015481908490600160a060020a031633146105b257600080fd5b600085815260016020526040902092506105cc838561137f565b915081156106025760408051868152602081018490528151600080516020612ef9833981519152929181900390910190a161066f565b60078301805460010190819055426004850155600684015560028301546040805188815260208101889052600160a060020a039092168282015260608201869052517fc32d73f54fbafb3a4f05d1f05fa0d120659da2f8494eee5a94442fcda572f4159181900360800190a15b505050505050565b60008381526001602052604081206002015481906060908690600160a060020a031633146106a457600080fd5b600087815260016020526040902093506106c0848888886114f3565b909350915082156106f95760408051888152602081018590528151600080516020612ef9833981519152929181900390910190a161084e565b6007840180546001019081905542600486015560058501556003840154604080518a815260208082018b9052600160a060020a039093169181018290526060810189905260c06080820181815289519183019190915288517f39eb553cd1a51fa2226da9b6bc983cf6c2d87c588236014a137e080b22fc2036948d948d9490938d938d938b93929160a084019160e08501919087019080838360005b838110156107ad578181015183820152602001610795565b50505050905090810190601f1680156107da5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561080d5781810151838201526020016107f5565b50505050905090810190601f16801561083a5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a15b5050505050505050565b60008281526001602052604081206002015481908490600160a060020a0316331461088257600080fd5b6000858152600160205260409020925061089c83856116db565b915081156108d25760408051868152602081018490528151600080516020612ef9833981519152929181900390910190a161066f565b6007830180546001019081905542600485015560058401556003830154604080518881526020808201899052600160a060020a0390931691810182905260806060820181815288519183019190915287517fbca3431b78418303a430f83db37413835aa6c34f2bc94b5cb93f3c1a56384e69948b948b9490938b939192909160a0840191808601910280838360005b83811015610979578181015183820152602001610961565b505050509050019550505050505060405180910390a1505050505050565b60008181526001602052604081206003015481908390600160a060020a031633146109c157600080fd5b600084815260016020526040902092506109da836118a9565b91508115610a105760408051858152602081018490528151600080516020612ef9833981519152929181900390910190a1610a76565b60078301805460010190819055426004850155600684015560028301546040805187815260208101879052600160a060020a0390921682820152517f0817bf136ff95abb2d41d10a9fa5ff6652ff71c13e1b46717fae65db16423c9b9181900360600190a15b5050505050565b60045481565b600081815260016020908152604091829020600801805483518184028101840190945280845260609392830182828015610add57602002820191906000526020600020905b81548152600190910190602001808311610ac8575b50505050509050919050565b60025481565b6007546101009004600160a060020a031681565b60005481565b6007546101009004600160a060020a0316338114610b2657600080fd5b610b31826001611936565b5050565b60055481565b600754600090819081906101009004600160a060020a0316338114610b5f57600080fd5b60508614610b6c57600080fd5b6000898152600660209081526040808320805484526001909252909120600c81015491955093508914610b9e57600080fd5b6007600d84015460ff16600b811115610bb357fe5b14610bbd57600080fd5b6002830154600160a060020a03868116911614610bd957600080fd5b60018401546000908152600b8401602052604090209150600260018301546c01000000000000000000000000900460ff166004811115610c1557fe5b14610c1f57600080fd5b60038201548814610c2f57600080fd5b600282810180546040805160206001841615610100026000190190931694909404601f8101839004830285018301909152808452610cf5939291830182828015610cba5780601f10610c8f57610100808354040283529160200191610cba565b820191906000526020600020905b815481529060010190602001808311610c9d57829003601f168201915b505050505088888080601f01602080910402602001604051908101604052809392919081815260200183838082843750611a62945050505050565b15610cff57600080fd5b5050600d8101805460ff1916600817905560078101805460010190819055426004830155600590910155505050505050565b60008181526001602052604081206008600d82015460ff16600b811115610d5457fe5b14158015610d69575080600501548160060154115b8015610d7c575060045481600401540142115b91505b50919050565b60008281526001602052604081206003015481908490600160a060020a03163314610daf57600080fd5b60008581526001602052604090209250610dcb83878787611adb565b91508115610e015760408051868152602081018490528151600080516020612ef9833981519152929181900390910190a161066f565b600783018054600101908190554260048501556006840155505050505050565b60008181526001602052604081206008600d82015460ff16600b811115610e4457fe5b1415610e7e576040805184815261c36e60208201528151600080516020612ef9833981519152929181900390910190a161c36e9150610d7f565b600b600d82015460ff16600b811115610e9357fe5b1480610eb8575080600501548160060154118015610eb8575060045481600401540142115b15610ee75760028101546001820154610ede918591600160a060020a0390911690611c97565b60009150610d7f565b80600601548160050154118015610f05575060045481600401540142115b15610f2b5760038101546001820154610ede918591600160a060020a0390911690611d20565b6040805184815261c36e60208201528151600080516020612ef9833981519152929181900390910190a15061c36e92915050565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600686015460078701546009880154600a890154600c8a0154600d909a01549899600160a060020a0398891699989097169795969495939492939192909160ff168c565b60008181526001602052604081206008600d82015460ff16600b811115610ff157fe5b14158015610d69575080600601548160050154118015610d7c57506004805491015401421192915050565b6006602052600090815260409020805460019091015482565b60008181526001602052604081209061104e8284611da9565b9050806001141561107f576003820154600183015461107a918591600160a060020a0390911690611d20565b6110a9565b80600214156110a957600282015460018301546110a9918591600160a060020a0390911690611c97565b505050565b60085460009081908190600160a060020a03163381146110cd57600080fd5b6002546040805160208082018b9052338284015260608083019490945282518083039094018452608090910191829052825182918401908083835b602083106111275780518252601f199092019160209182019101611108565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020925060016000846000191660001916815260200190815260200160002091508282600001816000191690555086826001018160001916905550858260020160006101000a815481600160a060020a030219169083600160a060020a03160217905550848260030160006101000a815481600160a060020a030219169083600160a060020a03160217905550428260040181905550600082600601819055506001826005018190555060018260070181905550600182600d0160006101000a81548160ff0219169083600b81111561122757fe5b02179055506002805460010190556040805188815260208101859052600160a060020a03808916828401528716606082015290517f403956bdc140717d54d4573786b4e9e773ef2e6e325e2c061476eb47711770de9181900360800190a1509095945050505050565b6007546101009004600160a060020a03163381146112ad57600080fd5b610b31826000611936565b600854600160a060020a03161580156112d95750600160a060020a03811615155b15156112e457600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6007546101009004600160a060020a03161580156113395750600160a060020a03811615155b151561134457600080fd5b60078054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b60035481565b60008061138e33600054611ea8565b151561139e5761c38c91506114ec565b6006600d85015460ff16600b8111156113b357fe5b14156113c2576113c284611f46565b60098401541580156113e657506003600d85015460ff16600b8111156113e457fe5b145b8061141257506000846009015411801561141257506005600d85015460ff16600b81111561141057fe5b145b156114e657600884015460098501541061142b57600080fd5b600080848152600b860160205260409020600101546c01000000000000000000000000900460ff16600481111561145e57fe5b1461146857600080fd5b611479846001015433600054611fad565b509050801561148a578091506114ec565b60098401805460019081019091556000848152600b86016020526040812090910180546c010000000000000000000000006cff00000000000000000000000019909116179055600d8501805460ff1916600417905591506114ec565b61c36491505b5092915050565b6000606060008060006060600061150c33600054611ea8565b1515611532576040805160008082526020820190925261c38c915b5090975095506116cd565b6004600d8c015460ff16600b81111561154757fe5b14156116b65761155a8860006050612061565b6000818152600b8d016020526040902090955093506001808501546c01000000000000000000000000900460ff16600481111561159357fe5b146115b1576040805160008082526020820190925261c36991611527565b6115bf8b6001015489612122565b15156115de576040805160008082526020820190925261c37391611527565b6115e9848a8a6121a3565b9093509150821561160b57604080516000808252602082019092528491611527565b600184810180546cff00000000000000000000000019166c020000000000000000000000001790558b015460005461164591903390611fad565b509250821561166557604080516000808252602082019092528491611527565b600384015460028c0154611685918c918890600160a060020a03166123ba565b600a8c0180546001019055600d8c01805460ff19166006179055600c8c0181905560009750919550859190506116cd565b60408051600081526020810190915261c364975095505b505050505094509492505050565b6000806000806116ed33600054611ea8565b15156116fd5761c38c93506118a0565b60088601541561170c57600080fd5b6002600d87015460ff16600b81111561172157fe5b141561189a576117348660010154612499565b505050509550505050925084600186510381518110151561175157fe5b60209081029091010151821461176b5761c3e693506118a0565b6040517ff9b5d7c000000000000000000000000000000000000000000000000000000000815260206004820181815287516024840152875173__DogeMessageLibrary____________________9363f9b5d7c0938a9392839260440191808601910280838360005b838110156117eb5781810151838201526020016117d3565b505050509050019250505060206040518083038186803b15801561180e57600080fd5b505af4158015611822573d6000803e3d6000fd5b505050506040513d602081101561183857600080fd5b5051831461184a5761c37893506118a0565b61185b866001015433600054611fad565b509050801561186c578093506118a0565b84516118819060088801906020880190612dff565b50600d8601805460ff19166003179055600093506118a0565b61c36493505b50505092915050565b6000806118b833600054611ea8565b15156118c85761c38c9150610d7f565b6001600d84015460ff16600b8111156118dd57fe5b141561192c57600d8301805460ff19166002179055600383015433600160a060020a039091161461190a57fe5b61191b836001015433600054611fad565b5090508015610ede57809150610d7f565b5061c36492915050565b60008281526006602090815260408083208054845260019092528220600c81015491929091851461196657600080fd5b6008600d83015460ff16600b81111561197b57fe5b1461198557600080fd5b5060018201546000908152600b820160205260409020600260018201546c01000000000000000000000000900460ff1660048111156119c057fe5b146119ca57600080fd5b6119d9828460010154866125be565b4260048301556001808301548454600380850154938701549086015460408051948552602085019390935283830194909452606083015260808201889052600160a060020a0390921660a082015285151560c082015290517f13a771cb91faa8e8a02bf31e73e4f740eec154e07a621921f8032b2f2283b6e89181900360e00190a15050505050565b600080600084516050141515611a7757600080fd5b8351605014611a8557600080fd5b505060208381015190830151808214611aa2578082039250611ad3565b505060408381015190830151808214611abf578082039250611ad3565b605085015191506050840151905080820392505b505092915050565b6000806000611aec33600054611ea8565b1515611afc5761c38c9250611c8d565b6006600d88015460ff16600b811115611b1157fe5b1415611c87576000848152600b8801602052604090209150600260018301546c01000000000000000000000000900460ff166004811115611b4e57fe5b1415611c8757611b65876001015433600054611fad565b5090508015611b7657809250611c8d565b6003820154600c880154600289810154604080518b8152602081018b905290810185905260808101849052600160a060020a0390911660a0820181905260c06060830181815284890180546001811615610100026000190116959095049184018290527fa0a243586b0bd46802910cb3689c5f90d34de99ee8c612f60614bc120f7ebfe6968d968d9691959194909390929060e083019086908015611c5c5780601f10611c3157610100808354040283529160200191611c5c565b820191906000526020600020905b815481529060010190602001808311611c3f57829003601f168201915b505097505050505050505060405180910390a1600d8701805460ff1916600717905560009250611c8d565b61c36492505b5050949350505050565b600083815260016020526040902060038101546002820154611cc99186918591600160a060020a039081169116612673565b611cd284612704565b6040805183815260208101869052600160a060020a0385168183015290517faab6a8f22c7ab5131c1cdc1c0000e123efd38efadfef092cef78be507d16542e9181900360600190a150505050565b600083815260016020526040902060028101546003820154611d529186918591600160a060020a039081169116612673565b611d5b84612704565b6040805183815260208101869052600160a060020a0385168183015290517fda9b5fdafb0f67d811425d3f095917a63329d60d3db3aa456b5247a8f3b88b119181900360600190a150505050565b6000806006600d85015460ff16600b811115611dc157fe5b1415611dd057611dd084611f46565b6009600d85015460ff16600b811115611de557fe5b1415611e7a57611df484612798565b90508015611e2e5760408051848152602081018390528151600080516020612ef9833981519152929181900390910190a1600291506114ec565b611e3784612900565b90508015611e715760408051848152602081018390528151600080516020612ef9833981519152929181900390910190a1600291506114ec565b600191506114ec565b600b600d85015460ff16600b811115611e8f57fe5b1415611e9e57600291506114ec565b5060009392505050565b600854604080517fe1254fba000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015291516000938593169163e1254fba91602480830192602092919082900301818887803b158015611f1157600080fd5b505af1158015611f25573d6000803e3d6000fd5b505050506040513d6020811015611f3b57600080fd5b505110159392505050565b600c81015460009081901515611f5b57600080fd5b5050600c810154600081815260066020526040902080541515611f7d57600080fd5b611f8d83826001015460016125be565b506000908152600660205260408120818155600101819055600c90910155565b600854604080517fc2569e5a00000000000000000000000000000000000000000000000000000000815260048101869052600160a060020a038581166024830152604482018590528251600094859492169263c2569e5a92606480830193919282900301818787803b15801561202257600080fd5b505af1158015612036573d6000803e3d6000fd5b505050506040513d604081101561204c57600080fd5b50805160209091015190969095509350505050565b600061211a6002612073868686612cdb565b6040805160208082019390935281518082038401815290820191829052805190928291908401908083835b602083106120bd5780518252601f19909201916020918201910161209e565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af11580156120fe573d6000803e3d6000fd5b5050506040513d602081101561211357600080fd5b5051612d02565b949350505050565b6000806000612132846000612d2d565b63ffffffff16915061214385612499565b505060035494975093955086945050508315159150612160905057fe5b046003548381151561216e57fe5b041115801561219a575060016003548281151561218757fe5b04036003548381151561219657fe5b0410155b95945050505050565b600060606000806000606073__DogeMessageLibrary____________________63fa7199a18860008a518c600190046040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b8381101561224c578181015183820152602001612234565b50505050905090810190601f1680156122795780820380516001836020036101000a031916815260200191505b509550505050505060806040518083038186803b15801561229957600080fd5b505af41580156122ad573d6000803e3d6000fd5b505050506040513d60808110156122c357600080fd5b5080516040820151606090920151909550909350915083156122fb5760408051600081526020810190915293955092935084926123ae565b816123125761230d8760006050612d61565b612322565b6123228760508951038951612d61565b905061232f876000612d2d565b60018a01805467ffffffffffffffff191663ffffffff9290921691909117905561235a876000612db8565b8960010160086101000a81548163ffffffff021916908363ffffffff160217905550612387876000612dec565b89556003890183905580516123a59060028b01906020840190612e4c565b50600081955095505b50505050935093915050565b60058054600101908190556040805160208082018790526c01000000000000000000000000600160a060020a038616028284015260548083019490945282518083039094018452607490910191829052825160009384939092909182918401908083835b6020831061243d5780518252601f19909201916020918201910161241e565b51815160001960209485036101000a0190811690199091161790526040805194909201849003842084830183529b8452838101998a5260008c815260069091522091518255509551600190960195909555509495945050505050565b600954604080517f6e5b707100000000000000000000000000000000000000000000000000000000815260048101849052905160009283928392839283928392839283928392600160a060020a0390921691636e5b7071916024808201926101209290919082900301818787803b15801561251357600080fd5b505af1158015612527573d6000803e3d6000fd5b505050506040513d61012081101561253e57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050509850985098509850985098509850985098509193959799909294969850565b6000828152600b8401602052604090208115612634576001810180546cff00000000000000000000000019166c030000000000000000000000001790556008840154600a850154141561261f57600d8401805460ff1916600917905561262f565b600d8401805460ff191660051790555b61266d565b6001810180546c040000000000000000000000006cff00000000000000000000000019909116179055600d8401805460ff1916600b1790555b50505050565b600854604080517f748a00e20000000000000000000000000000000000000000000000000000000081526004810187905260248101869052600160a060020a03858116604483015284811660648301529151919092169163748a00e291608480830192600092919082900301818387803b1580156126f057600080fd5b505af115801561084e573d6000803e3d6000fd5b6000818152600160208190526040822082815590810182905560028101805473ffffffffffffffffffffffffffffffffffffffff19908116909155600382018054909116905560048101829055600581018290556006810182905560078101829055906127746008830182612eba565b50600060098201819055600a8201819055600c820155600d01805460ff1916905550565b600080600080600080600087600801805490501115156127bc5761c3e695506128f6565b6127c98760010154612499565b505060088e018054959c50939a509098509650909350506000198101915081106127ef57fe5b6000918252602080832090910154808352600b8a0190915260409091206001015490915067ffffffffffffffff16851461282d5761c37395506128f6565b6000818152600b8801602052604090206001015463ffffffff8481166801000000000000000090920416146128665761c3d295506128f6565b6008870154600110156128ca57600887018054600119810190811061288757fe5b6000918252602080832090910154808352600b8a0190915260409091206001015490915067ffffffffffffffff1684146128c55761c37395506128f6565b6128f1565b6128d382612499565b50949b505050888a1494506128f193505050505761c37395506128f6565b600095505b5050505050919050565b60008060008060008060008060008060008060006129218e60010154612499565b90919293949596975090919293949550909192939450909192935090919250905050809b50819d5050506129548a612499565b909192939495969750909150905050809a50819d50829b50839c50849f505050505050600094505b60088e0154851015612c935760088e0180548690811061299857fe5b906000526020600020015492508d600b016000846000191660001916815260200190815260200160002060010160089054906101000a900463ffffffff16915088600019168e600b01600085600019166000191681526020019081526020016000206000015460001916141515612a135761c3829c50612cca565b600260075460ff166002811115612a2657fe5b14612b4057604080517f7034991b000000000000000000000000000000000000000000000000000000008152888a03600790810b900b600482015263ffffffff88166024820152905173__DogeMessageLibrary____________________91637034991b916044808301926020929190829003018186803b158015612aaa57600080fd5b505af4158015612abe573d6000803e3d6000fd5b505050506040513d6020811015612ad457600080fd5b50519050600160075460ff166002811115612aeb57fe5b148015612b1a57506000838152600b8f016020526040902060010154607867ffffffffffffffff909116899003115b15612b265750631e0fffff5b63ffffffff82811690821614612b405761c3d29c50612cca565b6000838152600b8f0160209081526040918290206001015482517f304ef8ac0000000000000000000000000000000000000000000000000000000081526801000000000000000090910463ffffffff166004820152915173__DogeMessageLibrary____________________9263304ef8ac926024808301939192829003018186803b158015612bcf57600080fd5b505af4158015612be3573d6000803e3d6000fd5b505050506040513d6020811015612bf957600080fd5b8101908080519060200190929190505050840193508298508d600b016000846000191660001916815260200190815260200160002060010160089054906101000a900463ffffffff1695508796508d600b016000846000191660001916815260200190815260200160002060010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16975060018501945061297c565b600260075460ff166002811115612ca657fe5b14158015612cb657508b848c0114155b15612cc55761c3c89c50612cca565b60009c505b505050505050505050505050919050565b60006040516020818486602089010160025afa1515612cf957600080fd5b51949350505050565b600060405160005b6020811015612d25578381601f031a81830153600101612d0a565b505192915050565b600081604c84010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b6060600060608484039150816040519080825280601f01601f191660200182016040528015612d9a578160200160208202803883390190505b5090508160208201838760208a010160045afa151561219a57600080fd5b600081605084010151630100000081601b1a026201000082601a1a02016101008260191a02018160181a0191505092915050565b8181016024015160009061211a81612d02565b828054828255906000526020600020908101928215612e3c579160200282015b82811115612e3c5782518255602090920191600190910190612e1f565b50612e48929150612edb565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612e8d57805160ff1916838001178555612e3c565b82800160010185558215612e3c579182015b82811115612e3c578251825591602001919060010190612e9f565b5080546000825590600052602060002090810190612ed89190612edb565b50565b612ef591905b80821115612e485760008155600101612ee1565b90560080235326defb5d335564dd77860b0a010e19446427d3d78d155cabd064ca9c2aa165627a7a72305820819fe2d7e19e43acf20680afb81442233692ca6f8d4eeef72d11787820c7f7360029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("32001", "0x028bf402f10e02baa07afcd663d381cfca348691");
    }

    protected DogeBattleManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeBattleManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<NewBattleEventResponse> getNewBattleEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewBattle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewBattleEventResponse> responses = new ArrayList<NewBattleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewBattleEventResponse typedResponse = new NewBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewBattleEventResponse> newBattleEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewBattle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewBattleEventResponse>() {
            @Override
            public NewBattleEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewBattleEventResponse typedResponse = new NewBattleEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<ChallengerConvictedEventResponse> getChallengerConvictedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ChallengerConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ChallengerConvictedEventResponse> responses = new ArrayList<ChallengerConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ChallengerConvictedEventResponse> challengerConvictedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ChallengerConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ChallengerConvictedEventResponse>() {
            @Override
            public ChallengerConvictedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ChallengerConvictedEventResponse typedResponse = new ChallengerConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<SubmitterConvictedEventResponse> getSubmitterConvictedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SubmitterConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<SubmitterConvictedEventResponse> responses = new ArrayList<SubmitterConvictedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SubmitterConvictedEventResponse> submitterConvictedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SubmitterConvicted", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SubmitterConvictedEventResponse>() {
            @Override
            public SubmitterConvictedEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                SubmitterConvictedEventResponse typedResponse = new SubmitterConvictedEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<QueryMerkleRootHashesEventResponse> getQueryMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("QueryMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<QueryMerkleRootHashesEventResponse> responses = new ArrayList<QueryMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<QueryMerkleRootHashesEventResponse> queryMerkleRootHashesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("QueryMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, QueryMerkleRootHashesEventResponse>() {
            @Override
            public QueryMerkleRootHashesEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                QueryMerkleRootHashesEventResponse typedResponse = new QueryMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<RespondMerkleRootHashesEventResponse> getRespondMerkleRootHashesEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RespondMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RespondMerkleRootHashesEventResponse> responses = new ArrayList<RespondMerkleRootHashesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockHashes = (List<byte[]>) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RespondMerkleRootHashesEventResponse> respondMerkleRootHashesEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RespondMerkleRootHashes", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RespondMerkleRootHashesEventResponse>() {
            @Override
            public RespondMerkleRootHashesEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RespondMerkleRootHashesEventResponse typedResponse = new RespondMerkleRootHashesEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockHashes = (List<byte[]>) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<QueryBlockHeaderEventResponse> getQueryBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("QueryBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<QueryBlockHeaderEventResponse> responses = new ArrayList<QueryBlockHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            QueryBlockHeaderEventResponse typedResponse = new QueryBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockSha256Hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<QueryBlockHeaderEventResponse> queryBlockHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("QueryBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, QueryBlockHeaderEventResponse>() {
            @Override
            public QueryBlockHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                QueryBlockHeaderEventResponse typedResponse = new QueryBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockSha256Hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<RespondBlockHeaderEventResponse> getRespondBlockHeaderEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RespondBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RespondBlockHeaderEventResponse> responses = new ArrayList<RespondBlockHeaderEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RespondBlockHeaderEventResponse typedResponse = new RespondBlockHeaderEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.powBlockHeader = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RespondBlockHeaderEventResponse> respondBlockHeaderEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RespondBlockHeader", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RespondBlockHeaderEventResponse>() {
            @Override
            public RespondBlockHeaderEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RespondBlockHeaderEventResponse typedResponse = new RespondBlockHeaderEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.powBlockHeader = (byte[]) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public List<RequestScryptHashValidationEventResponse> getRequestScryptHashValidationEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RequestScryptHashValidation", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<RequestScryptHashValidationEventResponse> responses = new ArrayList<RequestScryptHashValidationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestScryptHashValidationEventResponse typedResponse = new RequestScryptHashValidationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RequestScryptHashValidationEventResponse> requestScryptHashValidationEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RequestScryptHashValidation", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RequestScryptHashValidationEventResponse>() {
            @Override
            public RequestScryptHashValidationEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                RequestScryptHashValidationEventResponse typedResponse = new RequestScryptHashValidationEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockHeader = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.submitter = (String) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public List<ResolvedScryptHashValidationEventResponse> getResolvedScryptHashValidationEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ResolvedScryptHashValidation", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ResolvedScryptHashValidationEventResponse> responses = new ArrayList<ResolvedScryptHashValidationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ResolvedScryptHashValidationEventResponse typedResponse = new ResolvedScryptHashValidationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.blockSha256Hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.valid = (Boolean) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ResolvedScryptHashValidationEventResponse> resolvedScryptHashValidationEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ResolvedScryptHashValidation", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ResolvedScryptHashValidationEventResponse>() {
            @Override
            public ResolvedScryptHashValidationEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ResolvedScryptHashValidationEventResponse typedResponse = new ResolvedScryptHashValidationEventResponse();
                typedResponse.log = log;
                typedResponse.superblockHash = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.blockScryptHash = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.blockSha256Hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.proposalId = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.challenger = (String) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.valid = (Boolean) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public List<ErrorBattleEventResponse> getErrorBattleEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ErrorBattle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ErrorBattleEventResponse> responses = new ArrayList<ErrorBattleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorBattleEventResponse typedResponse = new ErrorBattleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorBattleEventResponse> errorBattleEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ErrorBattle", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorBattleEventResponse>() {
            @Override
            public ErrorBattleEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ErrorBattleEventResponse typedResponse = new ErrorBattleEventResponse();
                typedResponse.log = log;
                typedResponse.sessionId = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<BigInteger> superblockTimeout() {
        final Function function = new Function("superblockTimeout", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> sessionsCount() {
        final Function function = new Function("sessionsCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> trustedScryptChecker() {
        final Function function = new Function("trustedScryptChecker", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> minDeposit() {
        final Function function = new Function("minDeposit", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> numScryptHashVerifications() {
        final Function function = new Function("numScryptHashVerifications", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>> sessions(byte[] param0) {
        final Function function = new Function("sessions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>>(
                new Callable<Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>>() {
                    @Override
                    public Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<byte[], byte[], String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, byte[], BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (BigInteger) results.get(7).getValue(), 
                                (BigInteger) results.get(8).getValue(), 
                                (BigInteger) results.get(9).getValue(), 
                                (byte[]) results.get(10).getValue(), 
                                (BigInteger) results.get(11).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<byte[], byte[]>> scryptHashVerifications(byte[] param0) {
        final Function function = new Function("scryptHashVerifications", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteCall<Tuple2<byte[], byte[]>>(
                new Callable<Tuple2<byte[], byte[]>>() {
                    @Override
                    public Tuple2<byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> superblockDuration() {
        final Function function = new Function("superblockDuration", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<DogeBattleManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network, String _superblocks, BigInteger _superblockDuration, BigInteger _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network), 
                new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDuration), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout)));
        return deployRemoteCall(DogeBattleManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeBattleManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _network, String _superblocks, BigInteger _superblockDuration, BigInteger _superblockTimeout) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint8(_network), 
                new org.web3j.abi.datatypes.Address(_superblocks), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockDuration), 
                new org.web3j.abi.datatypes.generated.Uint256(_superblockTimeout)));
        return deployRemoteCall(DogeBattleManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> setScryptChecker(String _scryptChecker) {
        final Function function = new Function(
                "setScryptChecker", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_scryptChecker)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDogeClaimManager(String _dogeClaimManager) {
        final Function function = new Function(
                "setDogeClaimManager", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_dogeClaimManager)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> beginBattleSession(byte[] superblockHash, String submitter, String challenger) {
        final Function function = new Function(
                "beginBattleSession", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.Address(submitter), 
                new org.web3j.abi.datatypes.Address(challenger)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> queryMerkleRootHashes(byte[] superblockHash, byte[] sessionId) {
        final Function function = new Function(
                "queryMerkleRootHashes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respondMerkleRootHashes(byte[] superblockHash, byte[] sessionId, List<byte[]> blockHashes) {
        final Function function = new Function(
                "respondMerkleRootHashes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.Utils.typeMap(blockHashes, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> queryBlockHeader(byte[] superblockHash, byte[] sessionId, byte[] blockHash) {
        final Function function = new Function(
                "queryBlockHeader", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(blockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> respondBlockHeader(byte[] superblockHash, byte[] sessionId, byte[] blockScryptHash, byte[] blockHeader) {
        final Function function = new Function(
                "respondBlockHeader", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(blockScryptHash), 
                new org.web3j.abi.datatypes.DynamicBytes(blockHeader)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> requestScryptHashValidation(byte[] superblockHash, byte[] sessionId, byte[] blockSha256Hash) {
        final Function function = new Function(
                "requestScryptHashValidation", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(superblockHash), 
                new org.web3j.abi.datatypes.generated.Bytes32(sessionId), 
                new org.web3j.abi.datatypes.generated.Bytes32(blockSha256Hash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> verifySuperblock(byte[] sessionId) {
        final Function function = new Function(
                "verifySuperblock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> timeout(byte[] sessionId) {
        final Function function = new Function(
                "timeout", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptSubmitted(byte[] scryptChallengeId, byte[] _scryptHash, byte[] _data, String _submitter) {
        final Function function = new Function(
                "scryptSubmitted", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(scryptChallengeId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_scryptHash), 
                new org.web3j.abi.datatypes.DynamicBytes(_data), 
                new org.web3j.abi.datatypes.Address(_submitter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptVerified(byte[] scryptChallengeId) {
        final Function function = new Function(
                "scryptVerified", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(scryptChallengeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> scryptFailed(byte[] scryptChallengeId) {
        final Function function = new Function(
                "scryptFailed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(scryptChallengeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> getChallengerHitTimeout(byte[] sessionId) {
        final Function function = new Function("getChallengerHitTimeout", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<Boolean> getSubmitterHitTimeout(byte[] sessionId) {
        final Function function = new Function("getSubmitterHitTimeout", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<List> getDogeBlockHashes(byte[] sessionId) {
        final Function function = new Function("getDogeBlockHashes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(sessionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public static DogeBattleManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeBattleManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeBattleManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeBattleManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class NewBattleEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public String submitter;

        public String challenger;
    }

    public static class ChallengerConvictedEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public String challenger;
    }

    public static class SubmitterConvictedEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public String submitter;
    }

    public static class QueryMerkleRootHashesEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public String submitter;
    }

    public static class RespondMerkleRootHashesEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public String challenger;

        public List<byte[]> blockHashes;
    }

    public static class QueryBlockHeaderEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public String submitter;

        public byte[] blockSha256Hash;
    }

    public static class RespondBlockHeaderEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public String challenger;

        public byte[] blockScryptHash;

        public byte[] blockHeader;

        public byte[] powBlockHeader;
    }

    public static class RequestScryptHashValidationEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public byte[] blockScryptHash;

        public byte[] blockHeader;

        public byte[] proposalId;

        public String submitter;
    }

    public static class ResolvedScryptHashValidationEventResponse {
        public Log log;

        public byte[] superblockHash;

        public byte[] sessionId;

        public byte[] blockScryptHash;

        public byte[] blockSha256Hash;

        public byte[] proposalId;

        public String challenger;

        public Boolean valid;
    }

    public static class ErrorBattleEventResponse {
        public Log log;

        public byte[] sessionId;

        public BigInteger err;
    }
}
