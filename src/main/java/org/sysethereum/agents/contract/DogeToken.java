package org.sysethereum.agents.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes20;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint24;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class DogeToken extends Contract {
    private static final String BINARY = "0x60c0604052600460808190527f48302e310000000000000000000000000000000000000000000000000000000060a09081526200004091600691906200018e565b503480156200004e57600080fd5b5060405160608062003a13833981016040818152825160208085015194830151838501845260098086527f446f6765546f6b656e0000000000000000000000000000000000000000000000838701908152855180870187529182527f444f4745544f4b454e00000000000000000000000000000000000000000000008285015233600090815260019094529483208390558280558551939695919492939192600892620000fe916003916200018e565b506004805460ff191660ff84161790558051620001239060059060208401906200018e565b505060078054600160a060020a03978816600160a060020a0319918216179091556008805460ff909616740100000000000000000000000000000000000000000260a060020a60ff021997909816959091169490941794909416949094179091555062000233915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d157805160ff191683800117855562000201565b8280016001018555821562000201579182015b8281111562000201578251825591602001919060010190620001e4565b506200020f92915062000213565b5090565b6200023091905b808211156200020f57600081556001016200021a565b90565b6137d080620002436000396000f3006080604052600436106101a85763ffffffff60e060020a60003504166305347cdc81146101ad57806306fdde03146101d4578063095ea7b31461025e57806318160ddd1461029657806323b872dd146102ab578063313ce567146102d55780633e9745311461030057806341f7a1f7146103695780634b48a842146103d857806354fd4d50146103fa5780635be3b1b91461040f578063636a851514610426578063657857de146104545780636d440c6b146104eb57806370a082311461050d5780637b837b7a1461052e57806395c39bf61461055357806395d89b41146105685780639ed003161461057d578063a9059cbb14610595578063b4eae1cb146105b9578063b52d521d146101ad578063b85278a914610553578063ba24ecab146105ce578063c0f76faf146105fb578063c3d5e18614610613578063c5a4a2b71461068b578063cae9ca51146106c7578063cf496b1014610730578063d488399114610553578063d48e6a9a14610761578063d63ceb4614610852578063dd62ed3e14610899578063dd8f13bb146108c0578063eac66179146108d5578063f5b2040014610901575b600080fd5b3480156101b957600080fd5b506101c2610916565b60408051918252519081900360200190f35b3480156101e057600080fd5b506101e961091e565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561022357818101518382015260200161020b565b50505050905090810190601f1680156102505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026a57600080fd5b50610282600160a060020a03600435166024356109ac565b604080519115158252519081900360200190f35b3480156102a257600080fd5b506101c2610a13565b3480156102b757600080fd5b50610282600160a060020a0360043581169060243516604435610a19565b3480156102e157600080fd5b506102ea610b64565b6040805160ff9092168252519081900360200190f35b34801561030c57600080fd5b506103226001606060020a031960043516610b6d565b60408051600160a060020a03909716875260208701959095528585019390935263ffffffff9091166060850152608084015262ffffff1660a0830152519081900360c00190f35b34801561037557600080fd5b5061038763ffffffff60043516610bb8565b60408051600160a060020a0390981688526001606060020a03199687166020890152878101959095526060870193909352608086019190915260a085015290911660c0830152519081900360e00190f35b3480156103e457600080fd5b506101c26001606060020a031960043516610c08565b34801561040657600080fd5b506101e9610c27565b6104246001606060020a031960043516610c82565b005b34801561043257600080fd5b5061043b610cf3565b6040805163ffffffff9092168252519081900360200190f35b34801561046057600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261042494369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a999881019791965091820194509250829150840183828082843750949750610d189650505050505050565b3480156104f757600080fd5b506104246001606060020a031960043516611049565b34801561051957600080fd5b506101c2600160a060020a03600435166111b0565b34801561053a57600080fd5b506104246001606060020a0319600435166024356111cb565b34801561055f57600080fd5b506101c2611327565b34801561057457600080fd5b506101e961132c565b34801561058957600080fd5b50610282600435611387565b3480156105a157600080fd5b50610282600160a060020a0360043516602435611416565b3480156105c557600080fd5b506102ea6114d0565b3480156105da57600080fd5b506105e36114e0565b6040805162ffffff9092168252519081900360200190f35b34801561060757600080fd5b506104246004356114e7565b34801561061f57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101c2943694929360249392840191908190840183828082843750949750508435955050505060208201356001606060020a0319169160400135600160a060020a03169050611503565b34801561069757600080fd5b506106a360043561176a565b604080516001606060020a0319909316835290151560208301528051918290030190f35b3480156106d357600080fd5b50604080516020600460443581810135601f8101849004840285018401909552848452610282948235600160a060020a031694602480359536959460649492019190819084018382808284375094975061179a9650505050505050565b34801561073c57600080fd5b50610745611935565b60408051600160a060020a039092168252519081900360200190f35b34801561076d57600080fd5b5061077f63ffffffff60043516611944565b6040518089600160a060020a0316600160a060020a03168152602001886bffffffffffffffffffffffff19166bffffffffffffffffffffffff1916815260200187815260200186815260200185815260200180602001848152602001836bffffffffffffffffffffffff19166bffffffffffffffffffffffff19168152602001828103825285818151815260200191508051906020019060200280838360005b8381101561083757818101518382015260200161081f565b50505050905001995050505050505050505060405180910390f35b34801561085e57600080fd5b506108776001606060020a031960043516602435611a37565b60408051938452602084019290925261ffff1682820152519081900360600190f35b3480156108a557600080fd5b506101c2600160a060020a0360043581169060243516611a99565b3480156108cc57600080fd5b50610745611ac4565b3480156108e157600080fd5b506102826001606060020a03196004358116906024359060443516611ad3565b34801561090d57600080fd5b506101c261206f565b6311e1a30081565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109a45780601f10610979576101008083540402835291602001916109a4565b820191906000526020600020905b81548152906001019060200180831161098757829003601f168201915b505050505081565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a35060015b92915050565b60005481565b600160a060020a0383166000908152600160205260408120548211801590610a645750600160a060020a03841660009081526002602090815260408083203384529091529020548211155b1515610a6f57600080fd5b600160a060020a038316600090815260016020526040902054610a98908363ffffffff61207516565b600160a060020a038085166000908152600160205260408082209390935590861681522054610acd908363ffffffff61208216565b600160a060020a0385166000908152600160209081526040808320939093556002815282822033835290522054610b0a908363ffffffff61208216565b600160a060020a0380861660008181526002602090815260408083203384528252918290209490945580518681529051928716939192600080516020613785833981519152929181900390910190a35060015b9392505050565b60045460ff1681565b600b60205260009081526040902080546001820154600283015460048401546005850154600690950154600160a060020a03909416949293919263ffffffff9091169162ffffff1686565b6009602052600090815260409020805460018201546002830154600384015460048501546006860154600790960154600160a060020a0390951695606060020a9485029593949293919290910287565b6001606060020a0319166000908152600b602052604090206003015490565b6006805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109a45780601f10610979576101008083540402835291602001916109a4565b6001606060020a031981166000908152600b602052604090208054600160a060020a03163314610cd4576040805161ea74815290516000805160206137658339815191529181900360200190a1610cef565b6005810154610ce9903463ffffffff61207516565b60058201555b5050565b6008547501000000000000000000000000000000000000000000900463ffffffff1681565b600080600080600080876000815181101515610d3057fe5b90602001015160f860020a900460f860020a02600160f860020a031916600360f860020a0214945060218801519550600280336040516020018082600160a060020a0316600160a060020a0316606060020a0281526014019150506040516020818303038152906040526040518082805190602001908083835b60208310610dc95780518252601f199092019160209182019101610daa565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015610e0a573d6000803e3d6000fd5b5050506040513d6020811015610e1f57600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b60208310610e6b5780518252601f199092019160209182019101610e4c565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015610eac573d6000803e3d6000fd5b5050506040513d6020811015610ec157600080fd5b50519350610ecf8488612094565b9250610edb868661216b565b600160a060020a03848116911614610f15576040805161ea6a815290516000805160206137658339815191529181900360200190a161103f565b610f1f868661227f565b6001606060020a031981166000908152600b6020526040902080549193509150600160a060020a031615610f75576040805161ea6f815290516000805160206137658339815191529181900360200190a161103f565b80543373ffffffffffffffffffffffffffffffffffffffff19918216178255600c805460068401805462ffffff191662ffffff909216919091179055604080518082019091526001606060020a03198516815260006020820181815283546001810185559390915290517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c79092018054915191909316606060020a9092049190911774ff0000000000000000000000000000000000000000191660a060020a911515919091021790555b5050505050505050565b6001606060020a031981166000908152600b602052604081208054909190600160a060020a0316331461109e576040805161ea74815290516000805160206137658339815191529181900360200190a16111ab565b60018201541515806110b35750600282015415155b806110c15750600582015415155b156110ee576040805161ea7e815290516000805160206137658339815191529181900360200190a16111ab565b6006820154600c8054909162ffffff1690811061110757fe5b60009182526020808320909101805474ff0000000000000000000000000000000000000000191660a060020a1781556001606060020a031986168352600b90915260408220805473ffffffffffffffffffffffffffffffffffffffff19168155600181018390556002810183905590925090611186600383018261360e565b5060048101805463ffffffff1916905560006005820155600601805462ffffff191690555b505050565b600160a060020a031660009081526001602052604090205490565b6001606060020a031982166000908152600b602052604090208054600160a060020a0316331461121d576040805161ea74815290516000805160206137658339815191529181900360200190a16111ab565b8181600501541015611251576040805161ea88815290516000805160206137658339815191529181900360200190a16111ab565b600854600282015460018301546112839260a060020a900460ff16916112779190612075565b9063ffffffff61244716565b6112ac600a546112a085856005015461208290919063ffffffff16565b9063ffffffff61247016565b10156112da576040805161ea92815290516000805160206137658339815191529181900360200190a16111ab565b60058101546112ef908363ffffffff61208216565b6005820155604051339083156108fc029084906000818181858888f19350505050158015611321573d6000803e3d6000fd5b50505050565b600a81565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109a45780601f10610979576101008083540402835291602001916109a4565b600073__Set___________________________________636ce8e081600d846040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b1580156113e457600080fd5b505af41580156113f8573d6000803e3d6000fd5b505050506040513d602081101561140e57600080fd5b505192915050565b3360009081526001602052604081205482111561143257600080fd5b33600090815260016020526040902054611452908363ffffffff61208216565b3360009081526001602052604080822092909255600160a060020a03851681522054611484908363ffffffff61207516565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233926000805160206137858339815191529281900390910190a350600192915050565b60085460a060020a900460ff1681565b600c545b90565b600854600160a060020a031633146114fe57600080fd5b600a55565b600754600090819081908190819081908190600160a060020a0316331461152957600080fd5b6001606060020a031989166000908152600b602052604090208054909650600160a060020a0316151561157e576040805161ea9c815290516000805160206137658339815191529181900360200190a161175c565b6115888b8a612485565b8095508196508297508398505050505073__Set___________________________________63831cb739600d8c6040518363ffffffff1660e060020a028152600401808381526020018281526020019250505060206040518083038186803b1580156115f357600080fd5b505af4158015611607573d6000803e3d6000fd5b505050506040513d602081101561161d57600080fd5b50519050801515611650576040805161eaa6815290516000805160206137658339815191529181900360200190a161175c565b60008511156116ba576040805160608101825286815260208082018d815261ffff86811694840194855260038b81018054600180820183556000928352959091209551910290940193845590519183019190915591516002909101805461ffff1916919092161790555b60018601546116cf908663ffffffff61207516565b60018701556001606060020a03198981169085161461173d576311e1a30085101561171c576040805161eb14815290516000805160206137658339815191529181900360200190a161175c565b85546117359084908790600160a060020a03168b6125cd565b84965061175c565b6002860154611752908663ffffffff61208216565b6002870155600096505b505050505050949350505050565b600c80548290811061177857fe5b600091825260209091200154606060020a8102915060a060020a900460ff1682565b336000818152600260209081526040808320600160a060020a038816808552908352818420879055815187815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a383600160a060020a031660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e019050604051809103902060e060020a9004338530866040518563ffffffff1660e060020a0281526004018085600160a060020a0316600160a060020a0316815260200184815260200183600160a060020a0316600160a060020a03168152602001828051906020019080838360005b838110156118da5781810151838201526020016118c2565b50505050905090810190601f1680156119075780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af192505050151561192b57600080fd5b5060019392505050565b600754600160a060020a031681565b63ffffffff81166000908152600960209081526040808320805460018201546002830154600384015460048501546005860180548851818b0281018b01909952808952600160a060020a0390961699606060020a90950298939792969195606095948594929190830182828015611a0657602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116119c95790505b50505050509350806006015492508060070160009054906101000a9004606060020a02915050919395975091939597565b6001606060020a031982166000908152600b6020526040812060038101805483928392909183919087908110611a6957fe5b6000918252602090912060039091020180546001820154600290920154909991985061ffff169650945050505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600854600160a060020a031681565b600080600080606060008060006311e1a3008a1015611b14576040805161eab0815290516000805160206137658339815191529181900360200190a1612061565b336000908152600160205260409020548a1115611b53576040805161eaba815290516000805160206137658339815191529181900360200190a1612061565b6001606060020a031989166000908152600b602052604090208054909750600160a060020a03161515611ba8576040805161eac4815290516000805160206137658339815191529181900360200190a1612061565b8987600101541015611bdc576040805161eace815290516000805160206137658339815191529181900360200190a1612061565b6103e8611bf08b600a63ffffffff61244716565b811515611bf957fe5b049550611c0c8a8763ffffffff61208216565b6040805160e0810182528954600160a060020a0316815260018a015460208083019190915260028b01548284015260038b018054845181840281018401909552808552949950611cef948a948d93606086019391929060009084015b82821015611cb85760008481526020908190206040805160608101825260038602909201805483526001808201548486015260029091015461ffff16918301919091529083529092019101611c68565b50505090825250600482015463ffffffff1660208201526005820154604082015260069091015462ffffff1660609091015261283f565b9196509450925090508015611d24576040805182815290516000805160206137658339815191529181900360200190a1612061565b8654600160a060020a0316600090815260016020526040902054611d4e908763ffffffff61207516565b8754600160a060020a0390811660009081526001602090815260409182902093909355895481518a8152915192169233926000805160206137858339815191529281900390910190a333600090815260016020526040902054611db7908b63ffffffff61208216565b33600081815260016020908152604080832094909455835189815293519193600080516020613785833981519152929081900390910190a360085460408051750100000000000000000000000000000000000000000090920463ffffffff1682526001606060020a03198b16602083015280517fa452c19abf34fda31e59719208cf19c16be3dc9573465e8bf2ec1e4e89d3fad89281900390910190a16101006040519081016040528033600160a060020a031681526020018c6bffffffffffffffffffffffff191681526020018b81526020018781526020014281526020018581526020018481526020018a6bffffffffffffffffffffffff191681525060096000600860159054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a815481600160a060020a030219169083600160a060020a0316021790555060208201518160010160006101000a815481600160a060020a030219169083606060020a9004021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005019080519060200190611f79929190613632565b5060c0820151600682015560e0909101516007909101805473ffffffffffffffffffffffffffffffffffffffff1916606060020a909204919091179055611fd4611fc38684612075565b60018901549063ffffffff61208216565b60018801556002870154611fee908363ffffffff61207516565b6002880155835160048801805463ffffffff808216909301831663ffffffff19909116179055600880547501000000000000000000000000000000000000000000808204841660019081019094160278ffffffff0000000000000000000000000000000000000000001990911617905597505b505050505050509392505050565b600a5481565b81810182811015610a0d57fe5b60008282111561208e57fe5b50900390565b600080600080845160411415156120ae5760009350612162565b505050602082015160218301516041840151909160001a601b60ff821610156120d557601b015b8060ff16601b141580156120ed57508060ff16601c14155b156120fb5760009350612162565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af1158015612155573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b600080806401000003d01985860991506401000003d01985830991506401000003d0196007830891506121c5827f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffff0c6401000003d0196129c2565b9050600180821614841515146121de576401000003d019035b6401000003d01981820982146121f357600080fd5b848160405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831061224a5780518252601f19909201916020918201910161222b565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912098975050505050505050565b600080826122ad577f02000000000000000000000000000000000000000000000000000000000000006122cf565b7f03000000000000000000000000000000000000000000000000000000000000005b604080517fff0000000000000000000000000000000000000000000000000000000000000083166020808301919091526021808301899052835180840390910181526041909201928390528151939450600393600293918291908401908083835b6020831061234f5780518252601f199092019160209182019101612330565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015612390573d6000803e3d6000fd5b5050506040513d60208110156123a557600080fd5b50516040805160208181019390935281518082038401815290820191829052805190928291908401908083835b602083106123f15780518252601f1990920191602091820191016123d2565b51815160209384036101000a600019018019909216911617905260405191909301945091925050808303816000865af1158015612432573d6000803e3d6000fd5b505060405151606060020a0295945050505050565b600082151561245857506000610a0d565b5081810281838281151561246857fe5b0414610a0d57fe5b6000818381151561247d57fe5b049392505050565b6000806000806124936136e1565b600480825260609081906000908190819081906124b2908e9083612a08565b895281519097509095506124de908e90879060009081106124cf57fe5b90602001906020020151612b11565b151560a08901819052608089018290526124f8919061227f565b93506125098c8e8960000151612b40565b6001606060020a031993841660208c018190529096509194509250908d16148061253f57506001606060020a0319848116908d16145b151561254a57600080fd5b8b6bffffffffffffffffffffffff191687602001516bffffffffffffffffffffffff19161415612586576040870182905261ffff811660608801525b600160a060020a03831615156125ad57608087015160a08801516125aa919061216b565b92505b50506040850151606090950151949b919a50985092965091945050505050565b600080806103e86125e587600a63ffffffff61244716565b8115156125ee57fe5b600160a060020a038716600090815260016020526040902054919004935061261c908463ffffffff61207516565b600160a060020a038616600081815260016020908152604091829020939093558051868152905191927f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c92918290030190a2604080518481529051600160a060020a038716916000916000805160206137858339815191529181900360200190a36103e86126b187600a63ffffffff61244716565b8115156126ba57fe5b600160a060020a03861660009081526001602052604090205491900492506126e8908363ffffffff61207516565b600160a060020a038516600081815260016020908152604091829020939093558051858152905191927f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c92918290030190a2604080518381529051600160a060020a038616916000916000805160206137858339815191529181900360200190a36127898261277d888663ffffffff61208216565b9063ffffffff61208216565b600160a060020a0388166000908152600160205260409020549091506127b5908263ffffffff61207516565b600160a060020a038816600081815260016020908152604091829020939093558051848152905191927f275a11e033325e9b28a23131fcc7e243a49bb38beb686051976dd8c8899d9a3c92918290030190a2604080518281529051600160a060020a038916916000916000805160206137858339815191529181900360200190a350505050505050565b6000606060008060008060008060008960600151518a6080015163ffffffff161015156128705761ead898506129b4565b6302faf0809650896080015193508392505b8a8510801561289b57508960600151518363ffffffff16105b156128f6576128d38a606001518463ffffffff168151811015156128bb57fe5b6020908102909101015151869063ffffffff61207516565b94506128e9876305f5e10063ffffffff61207516565b9650600190920191612882565b8a8510156129085761eae298506129b4565b868b116129195761eaec98506129b4565b83830391508163ffffffff1660405190808252806020026020018201604052801561294e578160200160208202803883390190505b509750600090505b8163ffffffff168163ffffffff16101561299d57838101888263ffffffff1681518110151561298157fe5b63ffffffff909216602092830290910190910152600101612956565b6129ad858c63ffffffff61208216565b6000995095505b505050505092959194509250565b600060405160208152602080820152602060408201528460608201528360808201528260a082015260208160c08360055afa15156129ff57600080fd5b51949350505050565b6060806000806000806060806000612a208c8c612ca0565b9b509550891580612a305750858a115b15612a3d57859450612a41565b8994505b84604051908082528060200260200182016040528015612a6b578160200160208202803883390190505b50925084604051908082528060200260200182016040528015612a98578160200160208202803883390190505b509150600090505b84811015612b01578a8382815181101515612ab757fe5b6020908102909101015260249a909a0199612ad28c8c612ca0565b8351909c509094508490839083908110612ae857fe5b6020908102909101015299830160040199600101612aa0565b50909a9099509650505050505050565b6024016000808080612b238686612ca0565b9550612b3190508686612d62565b50909890975095505050505050565b6000806000806060806060600080600080612b5d8d8d6003612d99565b8251909f509099509097509095509250600090505b8551811015612c5157612bb48d8783815181101515612b8d57fe5b906020019060200201518984815181101515612ba557fe5b90602001906020020151612ef7565b93506001606060020a03198e81169085161415612bcf578092505b612c088d8783815181101515612be157fe5b906020019060200201518984815181101515612bf957fe5b90602001906020020151612f22565b15612c4957612c468d8783815181101515612c1f57fe5b906020019060200201518984815181101515612c3757fe5b90602001906020020151612fdf565b91505b600101612b72565b8551831015612c82578d8584815181101515612c6957fe5b9060200190602002015184849a509a509a509a50612c90565b60009a508a99508998508897505b5050505050505093509350935093565b60008060008484815181101515612cb357fe5b90602001015160f860020a900460f860020a0260f860020a9004905060018401935060fd8160ff161015612cef5760ff81169250839150612d5a565b8060ff1660fd1415612d1457612d0785856010612fe8565b8460020192509250612d5a565b8060ff1660fe1415612d3957612d2c85856020612fe8565b8460040192509250612d5a565b8060ff1660ff1415612d5a57612d5185856040612fe8565b84600801925092505b509250929050565b606060008060006060600080612d788989613309565b98509250612d86898961338a565b949b919a50985092965091945050505050565b606080606060008060008060608060606000612db58e8e612ca0565b9d5096508b1580612dc55750868c115b15612dd257869550612dd6565b8b95505b85604051908082528060200260200182016040528015612e00578160200160208202803883390190505b50935085604051908082528060200260200182016040528015612e2d578160200160208202803883390190505b50925085604051908082528060200260200182016040528015612e5a578160200160208202803883390190505b509150600090505b85811015612ee557612e768e8e6040612fe8565b8282815181101515612e8457fe5b6020908102909101015260089c909c019b612e9f8e8e612ca0565b8551909e509095508d90859083908110612eb557fe5b6020908102909101015282518590849083908110612ecf57fe5b602090810290910101529b84019b600101612e62565b509c919b509998509650505050505050565b6000612f0484848461342c565b15612f1d57612f168484600301613572565b9050610b5d565b610b5d565b6000816016148015612f7e575083517f6a0000000000000000000000000000000000000000000000000000000000000090859085908110612f5f57fe5b90602001015160f860020a900460f860020a02600160f860020a031916145b8015612fd7575083517f140000000000000000000000000000000000000000000000000000000000000090859060018601908110612fb857fe5b90602001015160f860020a900460f860020a02600160f860020a031916145b949350505050565b50016016015190565b6000816008141561302557838381518110151561300157fe5b90602001015160f860020a900460f860020a0260f860020a900460ff169050610b5d565b816010141561309157838360010181518110151561303f57fe5b90602001015160f860020a900460f860020a0260f860020a900461010002848481518110151561306b57fe5b90602001015160f860020a900460f860020a0260f860020a90040161ffff169050610b5d565b81602014156131625783836003018151811015156130ab57fe5b90602001015160f860020a900460f860020a0260f860020a900463010000000284846002018151811015156130dc57fe5b90602001015160f860020a900460f860020a0260f860020a90046201000002858560010181518110151561310c57fe5b90602001015160f860020a900460f860020a0260f860020a900461010002868681518110151561313857fe5b90602001015160f860020a900460f860020a0260f860020a900401010163ffffffff169050610b5d565b8160401415610b5d57838360070181518110151561317c57fe5b90602001015160f860020a900460f860020a0260f860020a90046701000000000000000284846006018151811015156131b157fe5b90602001015160f860020a900460f860020a0260f860020a900466010000000000000285856005018151811015156131e557fe5b90602001015160f860020a900460f860020a0260f860020a90046501000000000002868660040181518110151561321857fe5b90602001015160f860020a900460f860020a0260f860020a900464010000000002878760030181518110151561324a57fe5b90602001015160f860020a900460f860020a0260f860020a9004630100000002888860020181518110151561327b57fe5b90602001015160f860020a900460f860020a0260f860020a9004620100000289896001018151811015156132ab57fe5b90602001015160f860020a900460f860020a0260f860020a9004610100028a8a8151811015156132d757fe5b90602001015160f860020a900460f860020a0260f860020a90040101010101010167ffffffffffffffff169050610b5d565b6060600080606061331a86866135de565b95509150600960ff831610801590613336575060498260ff1611155b151561334157600080fd5b858581518110151561334f57fe5b90602001015160f860020a900460f860020a0260f860020a900460ff16603014151561337a57600080fd5b9560ff9091169390930193505050565b60008060008060008061339d88886135de565b97509250602160ff8416146133b157600080fd5b87878151811015156133bf57fe5b6020910101519787016021908101519960f860020a998a90049099027fff00000000000000000000000000000000000000000000000000000000000000167f0300000000000000000000000000000000000000000000000000000000000000149897019695505050505050565b600081601914801561346e5750838381518110151561344757fe5b90602001015160f860020a900460f860020a02600160f860020a031916607660f860020a02145b80156134ad5750838360010181518110151561348657fe5b90602001015160f860020a900460f860020a02600160f860020a03191660a960f860020a02145b80156134ec575083836002018151811015156134c557fe5b90602001015160f860020a900460f860020a02600160f860020a031916601460f860020a02145b801561352b5750838360170181518110151561350457fe5b90602001015160f860020a900460f860020a02600160f860020a031916608860f860020a02145b8015612fd75750838360180181518110151561354357fe5b90602001015160f860020a900460f860020a02600160f860020a03191660ac60f860020a021490509392505050565b600080805b60148110156135d057806013036008028585830181518110151561359757fe5b90602001015160f860020a900460f860020a0260f860020a9004600160a060020a03169060020a02820191508080600101915050613577565b50606060020a029392505050565b60008083838151811015156135ef57fe5b016020015160f860020a90819004810204915050600182019250929050565b508054600082556003029060005260206000209081019061362f9190613716565b50565b828054828255906000526020600020906007016008900481019282156136d15791602002820160005b8382111561369f57835183826101000a81548163ffffffff021916908363ffffffff160217905550926020019260040160208160030104928301926001030261365b565b80156136cf5782816101000a81549063ffffffff021916905560040160208160030104928301926001030261369f565b505b506136dd929150613743565b5090565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b6114e491905b808211156136dd576000808255600182015560028101805461ffff1916905560030161371c565b6114e491905b808211156136dd57805463ffffffff191681556001016137495600b56073699a886ff0a9e8b995881e51b5ccd562594c835e990ad2f7c35957a5a4ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820d0fff32c9c90d5a6509ff1f781d15f495e0f75c38caae9bff0cc1cc8b58101790029";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<>();
        _addresses.put("32001", "0x2167798bc31bee84c4802cd226617fafbc73ca88");
    }

    protected DogeToken(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DogeToken(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<ErrorDogeTokenEventResponse> getErrorDogeTokenEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ErrorDogeToken", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ErrorDogeTokenEventResponse> responses = new ArrayList<ErrorDogeTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ErrorDogeTokenEventResponse typedResponse = new ErrorDogeTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ErrorDogeTokenEventResponse> errorDogeTokenEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ErrorDogeToken", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ErrorDogeTokenEventResponse>() {
            @Override
            public ErrorDogeTokenEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ErrorDogeTokenEventResponse typedResponse = new ErrorDogeTokenEventResponse();
                typedResponse.log = log;
                typedResponse.err = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<NewTokenEventResponse> getNewTokenEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<NewTokenEventResponse> responses = new ArrayList<NewTokenEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewTokenEventResponse typedResponse = new NewTokenEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<NewTokenEventResponse> newTokenEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("NewToken", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, NewTokenEventResponse>() {
            @Override
            public NewTokenEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                NewTokenEventResponse typedResponse = new NewTokenEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<UnlockRequestEventResponse> getUnlockRequestEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Bytes20>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<UnlockRequestEventResponse> responses = new ArrayList<UnlockRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.operatorPublicKeyHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<UnlockRequestEventResponse> unlockRequestEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("UnlockRequest", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Bytes20>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, UnlockRequestEventResponse>() {
            @Override
            public UnlockRequestEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                UnlockRequestEventResponse typedResponse = new UnlockRequestEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.operatorPublicKeyHash = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse._owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<BigInteger> MIN_UNLOCK_VALUE() {
        final Function function = new Function("MIN_UNLOCK_VALUE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> name() {
        final Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String _spender, BigInteger _value) {
        final Function function = new Function(
                "approve", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> totalSupply() {
        final Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String _from, String _to, BigInteger _value) {
        final Function function = new Function(
                "transferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_from), 
                new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        final Function function = new Function("decimals", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> operators(byte[] param0) {
        final Function function = new Function("operators", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint24>() {}));
        return new RemoteCall<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<Tuple7<String, byte[], BigInteger, BigInteger, BigInteger, BigInteger, byte[]>> unlocksPendingInvestorProof(BigInteger param0) {
        final Function function = new Function("unlocksPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes20>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes20>() {}));
        return new RemoteCall<Tuple7<String, byte[], BigInteger, BigInteger, BigInteger, BigInteger, byte[]>>(
                new Callable<Tuple7<String, byte[], BigInteger, BigInteger, BigInteger, BigInteger, byte[]>>() {
                    @Override
                    public Tuple7<String, byte[], BigInteger, BigInteger, BigInteger, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, byte[], BigInteger, BigInteger, BigInteger, BigInteger, byte[]>(
                                (String) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (byte[]) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<String> version() {
        final Function function = new Function("version", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> unlockIdx() {
        final Function function = new Function("unlockIdx", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> balanceOf(String _owner) {
        final Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> OPERATOR_UNLOCK_FEE() {
        final Function function = new Function("OPERATOR_UNLOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> symbol() {
        final Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> transfer(String _to, BigInteger _value) {
        final Function function = new Function(
                "transfer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_to), 
                new org.web3j.abi.datatypes.generated.Uint256(_value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> collateralRatio() {
        final Function function = new Function("collateralRatio", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> MIN_LOCK_VALUE() {
        final Function function = new Function("MIN_LOCK_VALUE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> SUPERBLOCK_SUBMITTER_LOCK_FEE() {
        final Function function = new Function("SUPERBLOCK_SUBMITTER_LOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple2<byte[], Boolean>> operatorKeys(BigInteger param0) {
        final Function function = new Function("operatorKeys", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes20>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple2<byte[], Boolean>>(
                new Callable<Tuple2<byte[], Boolean>>() {
                    @Override
                    public Tuple2<byte[], Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], Boolean>(
                                (byte[]) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> approveAndCall(String _spender, BigInteger _value, byte[] _extraData) {
        final Function function = new Function(
                "approveAndCall", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_spender), 
                new org.web3j.abi.datatypes.generated.Uint256(_value), 
                new org.web3j.abi.datatypes.DynamicBytes(_extraData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> trustedRelayerContract() {
        final Function function = new Function("trustedRelayerContract", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> OPERATOR_LOCK_FEE() {
        final Function function = new Function("OPERATOR_LOCK_FEE", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> allowance(String _owner, String _spender) {
        final Function function = new Function("allowance", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.Address(_spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> trustedDogeEthPriceOracle() {
        final Function function = new Function("trustedDogeEthPriceOracle", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> dogeEthPrice() {
        final Function function = new Function("dogeEthPrice", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _trustedRelayerContract, String _trustedDogeEthPriceOracle, BigInteger _collateralRatio) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedRelayerContract), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Uint8(_collateralRatio)));
        return deployRemoteCall(DogeToken.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<DogeToken> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _trustedRelayerContract, String _trustedDogeEthPriceOracle, BigInteger _collateralRatio) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_trustedRelayerContract), 
                new org.web3j.abi.datatypes.Address(_trustedDogeEthPriceOracle), 
                new org.web3j.abi.datatypes.generated.Uint8(_collateralRatio)));
        return deployRemoteCall(DogeToken.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public RemoteCall<TransactionReceipt> addOperator(byte[] operatorPublicKeyCompressed, byte[] signature) {
        final Function function = new Function(
                "addOperator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(operatorPublicKeyCompressed), 
                new org.web3j.abi.datatypes.DynamicBytes(signature)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deleteOperator(byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "deleteOperator", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getOperatorsLength() {
        final Function function = new Function("getOperatorsLength", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint24>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addOperatorDeposit(byte[] operatorPublicKeyHash, BigInteger weiValue) {
        final Function function = new Function(
                "addOperatorDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> withdrawOperatorDeposit(byte[] operatorPublicKeyHash, BigInteger value) {
        final Function function = new Function(
                "withdrawOperatorDeposit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> processTransaction(byte[] dogeTx, BigInteger txHash, byte[] operatorPublicKeyHash, String superblockSubmitterAddress) {
        final Function function = new Function(
                "processTransaction", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(dogeTx), 
                new org.web3j.abi.datatypes.generated.Uint256(txHash), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.Address(superblockSubmitterAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> wasDogeTxProcessed(BigInteger txHash) {
        final Function function = new Function("wasDogeTxProcessed", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(txHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> doUnlock(byte[] dogeAddress, BigInteger value, byte[] operatorPublicKeyHash) {
        final Function function = new Function(
                "doUnlock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(dogeAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setDogeEthPrice(BigInteger _dogeEthPrice) {
        final Function function = new Function(
                "setDogeEthPrice", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_dogeEthPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple8<String, byte[], BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>> getUnlockPendingInvestorProof(BigInteger index) {
        final Function function = new Function("getUnlockPendingInvestorProof", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes20>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint32>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes20>() {}));
        return new RemoteCall<Tuple8<String, byte[], BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>>(
                new Callable<Tuple8<String, byte[], BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>>() {
                    @Override
                    public Tuple8<String, byte[], BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, byte[], BigInteger, BigInteger, BigInteger, List<BigInteger>, BigInteger, byte[]>(
                                (String) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                convertToNative((List<Uint32>) results.get(5).getValue()), 
                                (BigInteger) results.get(6).getValue(), 
                                (byte[]) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getUtxosLength(byte[] operatorPublicKeyHash) {
        final Function function = new Function("getUtxosLength", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>> getUtxo(byte[] operatorPublicKeyHash, BigInteger i) {
        final Function function = new Function("getUtxo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes20(operatorPublicKeyHash), 
                new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint16>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public static DogeToken load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static DogeToken load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DogeToken(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ErrorDogeTokenEventResponse {
        public Log log;

        public BigInteger err;
    }

    public static class NewTokenEventResponse {
        public Log log;

        public String user;

        public BigInteger value;
    }

    public static class UnlockRequestEventResponse {
        public Log log;

        public BigInteger id;

        public byte[] operatorPublicKeyHash;
    }

    public static class TransferEventResponse {
        public Log log;

        public String _from;

        public String _to;

        public BigInteger _value;
    }

    public static class ApprovalEventResponse {
        public Log log;

        public String _owner;

        public String _spender;

        public BigInteger _value;
    }
}
